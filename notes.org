* General Concepts
trunk is called master
  SHA1-Hashes as Revisionnumber, 40 hexdecimal digits
  - known as ref (git term)
  - prefix of 7 digits should be enough
  - commits refer the whole project not just one file file or directory as in svn
    
Usually there is still a central place, where everyone can synchronize with. This is called "origin".
Git is a distributed version control system, that means, everybody has its OWN local working copy of the whole repository and you can do, whatever
you want with it.

* GitConfig
  show config:
      git config --list
  get a certain config parameter
    git config --get option
  use --get-all if there are more than one parameter for one option
  unsetting a option
    git config --unset option
    git config --unset-all option
  distinguish config parameter global and repository-local
  Global config are saved under $HOME/.gitconfig
  local config are saved under .git/config
 First of all, you'll probably want to set your name and email for git:
        git config --global user.name "Mario Bielert"
        git config --global user.email "mario.bielert@tu-dresden.de"
 (or in a specific repository without --global to set it for the this git repository)
  git config color.ui "auto"
what can be configured? man git commit

** Aliases:
   If you tired of typing, like me, you can also create aliases inside git.
   For instance I've got:
   git config alias.st status
   So I just have to type "git st" instead of "git status".

** Ignoring Files
   .gitignore file can be placed in every directory of the project
   one entry per line
   empty lines and lines beginnig with '#' will be ignored
   entries ending with '/' will handled as directory
   entries beginning with '!' will negated
   shell globs

* Setting up a new git repository
  git init


  | Remote | LocalRepo -> | Committed | Index | Stash | LocalChanges (untracked) |

* Status:
You can view the state of the hole repository at any time.
    git status

* History
You can view the history of your repository/current branch with
    git log
Command to view the hole commit tree
[[http://stackoverflow.com/questions/1057564/pretty-git-branch-graphs][pretty branch graphs]]

* Repository
  local copy are always a complete repository
  complete history of every branch, not just current state
  Getting a local copy of a remote repository
    git clone URL
  Where URL is defined as:
    protocol://host[:port]/path/to/repository
  If you clone a Repository you always get a copy of the whole repository
  contains the complete revision history.
  For cloning just a few commit e.g to contribute a bugfix use the --depth option
    git clone --depth=42 URL #just clone the last three commits
  After clone git checks the HEAD revision of the repository automatically out

* Index:
The index is a snapshot of the working tree to trace changes that should be committed.
Changing the index is also known as staging.
A commit adds the state of the index to the repository.
Adding a file to the index
    git add file
After git add the file or directory (with all underlying files) are under
  version control.
  You can use
    git commit file dir/
  to commit files that are already under version control direct to the
  repository - no staging necessary
  If you want to commit all changes from files that are under version control
  directly you can use
    git commit -a
Just adding certain changes to the index
    git add --patch file
or  git add -p file
  In Patch modus changes are processed hunk-wise. Where a hunk is a peace of
  a file surrounded by unchanged lines (Context)
Interactive staging
  git add --interactive

* Moving and rename files
  files, directories, or symbolic links can be moved with
    git mv foo bar/foo
  - do not lose the history
  - changes considered in the index and in the local working copy

* Delete files and directories
  If git rm is called without the --cached parameter the file or directory is
  deleted in the index and from filesystem. If --cached is given it's just
  deleted from the index
  git rm file
  git rm --chached file
  git rm -r dir/

* Commits:
To commit the changes in the index
    git commit
or  git commit -m "commit message"

To commit all changes at once (without adding them before)
    git commit -a

To change the last commit
    git commit --amend

** Undoing commits:
Reset the HEAD Pointer to a commit before without delete the newer commit
    git reset commitId
If you just want to jump one commit backwards use
    git reset HEAD~1

To save the index and modified files while you goes backwards through your commits
    git reset --soft HEAD~1

If you want to delete all commits with there changes until a certain commit
    git reset --hard HEAD~1

If you want to delete commit and index but not the filesystem you can use
   git reset --mixed HEAD~1

If you want to bring one single file to a state of a certain commit
    git checkout [commitid] filename

To delete a specific commit, and his changes from revision history
   git revert commitid
Attention SVN-Users!!! svn revert is equivalent to git checkout

Once we all are familiar with git, we should consider to switching to git-flow
[[http://nvie.com/posts/a-successful-git-branching-model/][git-flow]]

* Stashes
I also forgot to tell you about one of my favourite commands.
   git stash
This will store every uncommitted changes you've done. With the following, you can reapply them:
    git stash pop
    git stash apply

* Remote
The Remote is something often named "origin" which is usual a bare repository where you 'pull' from and 'push' in.
It represents the remote site of your repository.

Getting a repository
  git clone url [folder]

Updating your local repository with the remote repository
  git pull remote branch

Putting your local updates to the remote repository
  git push remote branch

You can also maintain more than one remote of your repository
  (for example to provide mirrors on different plattforms e.g. github)
    git remote show

See detail of a certain remote
  git remote show remotename

(set upstream foo)

* Branching

List all branches
    git branch
Create a new branch
    git branch branchname
or  git checkout -b branchname
Change to a certain branch
    git checkout <branchname>
Delete a certain branch
    git -d my_merged_branch

If you're not satisfied with an uncommitted change, you can use:
    git checkout some_file.ext
to undo your changes, similar to "svn revert".

Git really favours branching and I endorse you, to do so. The idea is, that every time you want to change something,
you'll create a branch of master for your own. You should consider this branch private and shouldn't push it to origin.
Then you'll work on this branch, until you'll be done. When you'll merge your changes back to the master branch.
So a typical workflow would be:

      1. Create a new branch of master branch and check it out
      git checkout -b my_cool_feature

      2. Do whatever you have to do, commit it in a regular fashion
      git add ...
      git commit

      3. If there was several commits to master since you've branched of it, it's time to get those changes
      git pull
      git rebase master

      4. Merge your changes back to master
      git checkout master
      git merge my_cool_feature

      (Note: You could also rebase master on your branch, both methods have their own pros and cons.
      Simply stick to merge for now.)

      5. Push your changes of master to origin
      git push

(You might have to type the full commands once:
      git pull origin master
      git push origin master
)

* Follow the changes
  Changes in the working tree not yet staged for the next commit
      git diff
  Changes between the index and your last commit; what you would be committing
  if you run "git commit" without "-a" option.
      git diff --cached
  Changes in the working tree since your last commit; what you would be
  committing if you run "git commit -a"
      git diff HEAD

* References
  [[http://ndpsoftware.com/git-cheatsheet.html][git-cheatsheet]]
